{"version":3,"sources":["components/collision-listener.js"],"names":["AFRAME","registerComponent","init","el","addEventListener","evt","collider","detail","body","id","coordsData","thisMsg","object_id","action","type","data","position","x","y","z","source","ARENA","mqtt","publish","outputTopic"],"mappings":";AAMAA,OAAOC,kBAAkB,qBAAsB,CAE3CC,KAAM,WAEGC,KAAAA,GAAGC,iBAAiB,UAAW,SAASC,GAEnCC,MAAAA,EAAWD,EAAIE,OAAOC,KAAKL,GAAGM,GAChCH,GAAa,cAAbA,EACA,OAIEI,MAOAC,EAAU,CACZC,UAAW,KAAKH,GAChBI,OAAQ,cACRC,KAAM,YACNC,KAAM,CACFC,SAZW,CACfC,EAAG,EACHC,EAAG,EACHC,EAAG,GAUCC,OAAQd,IAGhBe,MAAMC,KAAKC,QAAQF,MAAMG,YAAc,KAAKf,GAAIE","file":"collision-listener.37ce7829.js","sourceRoot":"../src","sourcesContent":["/* global AFRAME, ARENA */\n\n/**\n * Listen for collisions, callback on event.\n *\n */\nAFRAME.registerComponent('collision-listener', {\n    // listen for collisions, call defined function on event evt\n    init: function() {\n        // console.log(\"collision-listener Component init\");\n        this.el.addEventListener('collide', function(evt) {\n            // colliding object, only act if is clients' own\n            const collider = evt.detail.body.el.id;\n            if (collider !== 'my-camera') {\n                return;\n            }\n\n            // const coordsData = setClickData(evt);\n            const coordsData = {\n                x: 0,\n                y: 0,\n                z: 0,\n            };\n\n            // original click event; simply publish to MQTT\n            const thisMsg = {\n                object_id: this.id,\n                action: 'clientEvent',\n                type: 'collision',\n                data: {\n                    position: coordsData,\n                    source: collider,\n                },\n            };\n            ARENA.mqtt.publish(ARENA.outputTopic + this.id, thisMsg);\n        });\n    },\n});\n"]}