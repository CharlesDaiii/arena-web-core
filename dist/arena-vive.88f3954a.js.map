{"version":3,"sources":["components/arena-vive.js"],"names":["eventAction","evt","eventName","myThis","newPosition","object3D","position","coordsData","x","toFixed","y","z","objName","id","ARENA","idTag","mqtt","publish","outputTopic","object_id","action","type","data","source","camName","AFRAME","registerComponent","schema","enabled","default","name","hand","color","Math","floor","random","toString","init","el","rotation","THREE","Quaternion","Vector3","lastPose","addEventListener","tick","utils","throttleTick","updateMillis","publishPose","charAt","toUpperCase","slice","msg","object_type","parseFloat","_x","_y","_z","w","_w","t","dt","quaternion","rotationCoords","newPose","coordinates","stringify"],"mappings":"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","file":"arena-vive.88f3954a.js","sourceRoot":"../src","sourcesContent":["/* global AFRAME, ARENA */\n\n/**\n * Generates a vive event\n * @param {Object} evt event\n * @param {string} eventName name of event, i.e. 'triggerup'\n * @param {Object} myThis reference to object that generated the event\n */\nfunction eventAction(evt, eventName, myThis) {\n    const newPosition = myThis.object3D.position;\n\n    const coordsData = {\n        x: newPosition.x.toFixed(3),\n        y: newPosition.y.toFixed(3),\n        z: newPosition.z.toFixed(3),\n    };\n\n    // publish to MQTT\n    const objName = myThis.id + '_' + ARENA.idTag;\n    ARENA.mqtt.publish(ARENA.outputTopic + objName, {\n        object_id: objName,\n        action: 'clientEvent',\n        type: eventName,\n        data: {\n            position: coordsData,\n            source: ARENA.camName,\n        },\n    });\n}\n\n/**\n * Tracking Vive controller movement in real time.\n *\n */\nAFRAME.registerComponent('arena-vive', {\n    schema: {\n        enabled: {type: 'boolean', default: false},\n        name: {type: 'string', default: ''},\n        hand: {type: 'string', default: 'left'},\n        color: {type: 'string', default: '#' + Math.floor(Math.random() * 16777215).toString(16)},\n    },\n\n    init: function() {\n        const el = this.el;\n\n        this.rotation = new THREE.Quaternion();\n        this.position = new THREE.Vector3();\n\n        this.lastPose = '';\n\n        el.addEventListener('triggerup', function(evt) {\n            eventAction(evt, 'triggerup', this);\n        });\n        el.addEventListener('triggerdown', function(evt) {\n            eventAction(evt, 'triggerdown', this);\n        });\n        el.addEventListener('gripup', function(evt) {\n            eventAction(evt, 'gripup', this);\n        });\n        el.addEventListener('gripdown', function(evt) {\n            eventAction(evt, 'gripdown', this);\n        });\n        el.addEventListener('menuup', function(evt) {\n            eventAction(evt, 'menuup', this);\n        });\n        el.addEventListener('menudown', function(evt) {\n            eventAction(evt, 'menudown', this);\n        });\n        el.addEventListener('systemup', function(evt) {\n            eventAction(evt, 'systemup', this);\n        });\n        el.addEventListener('systemdown', function(evt) {\n            eventAction(evt, 'systemdown', this);\n        });\n        el.addEventListener('trackpadup', function(evt) {\n            eventAction(evt, 'trackpadup', this);\n        });\n        el.addEventListener('trackpaddown', function(evt) {\n            eventAction(evt, 'trackpaddown', this);\n        });\n\n        this.tick = AFRAME.utils.throttleTick(this.tick, ARENA.updateMillis, this);\n    },\n\n    publishPose() {\n        const data = this.data;\n        if (!data.enabled || !data.hand) return;\n        const hand = data.hand.charAt(0).toUpperCase() + data.hand.slice(1);\n\n        const msg = {\n            object_id: data.name,\n            action: 'update',\n            type: 'object',\n            data: {\n                object_type: 'vive'+hand,\n                position: {\n                    x: parseFloat(this.position.x.toFixed(3)),\n                    y: parseFloat(this.position.y.toFixed(3)),\n                    z: parseFloat(this.position.z.toFixed(3)),\n                },\n                rotation: {\n                    x: parseFloat(this.rotation._x.toFixed(3)),\n                    y: parseFloat(this.rotation._y.toFixed(3)),\n                    z: parseFloat(this.rotation._z.toFixed(3)),\n                    w: parseFloat(this.rotation._w.toFixed(3)),\n                },\n                color: data.color,\n            },\n        };\n        ARENA.mqtt.publish(ARENA.outputTopic + data.name, msg);\n    },\n\n    tick: (function(t, dt) {\n        this.rotation = this.el.object3D.quaternion;\n        this.position = this.el.object3D.position;\n\n        const rotationCoords = AFRAME.utils.coordinates.stringify(this.rotation);\n        const positionCoords = AFRAME.utils.coordinates.stringify(this.position);\n\n        const newPose = rotationCoords + ' ' + positionCoords;\n        if (this.lastPose !== newPose) {\n            this.publishPose();\n            this.lastPose = newPose;\n        }\n    }),\n});\n"]}