{"version":3,"sources":["components/video-control.js"],"names":["AFRAME","registerComponent","schema","videoPath","type","default","multiple","init","data","theID","video_object","video_path","anyoneClicks","anyone_clicks","videoLoop","video_loop","frameSrc","frame_object","thePlayer","document","getElementById","theAssets","$","videoNum","el","id","videoId","append","frameId","setAttribute","thevideo","pause","addEventListener","evt","detail","clicker","ARENA","camName","theSource","getAttribute","theVideoId","theFrameId","volume","play","update","oldData","remove","event","removeEventListener","eventHandlerFn"],"mappings":";AAMAA,OAAOC,kBAAkB,gBAAiB,CAGtCC,OAAQ,CACJC,UAAW,CACPC,KAAM,SACNC,QAAS,KAGjBC,UAAU,EAEVC,KAAM,WACIC,MAAAA,EAAO,KAAKA,KACZC,EAAQD,EAAKE,aACbP,EAAYK,EAAKG,WACjBC,EAAeJ,EAAKK,cACpBC,EAAYN,EAAKO,WACnBC,IAAAA,EAAW,8BACXR,EAAKS,eACLD,EAAWR,EAAKS,cAGdC,MAAAA,EAAYC,SAASC,eAAeX,GACpCY,EAAYC,EAAE,YACHH,SAASC,eAAejB,GAEpCoB,KAAAA,SAAW,KAAKC,GAAGC,GAClBC,MAAAA,EAAU,KAAKH,SAAW,WAEhCF,EAAUM,qBACQD,WAAiBvB,qBAA6BW,QAI1Dc,MAAAA,EAAU,KAAKL,SAAW,WAEhCF,EAAUM,qBACQC,WAAiBZ,QAGnCE,EAAUW,aAAa,WAAY,UAAWD,KAG9CV,EAAUW,aAAa,aAAcb,GACrCE,EAAUW,aAAa,UAAWH,GAClCR,EAAUW,aAAa,UAAWD,GAE5BE,MAAAA,EAAWX,SAASC,eAAeM,GACzCI,EAASC,QAEJP,KAAAA,GAAGQ,iBAAiB,YAAa,SAASC,GACvCA,GAAAA,EAAIC,OAAOC,SAAWC,MAAMC,SAAWzB,GAAgBqB,EAAIC,OAAOC,SAAYF,EAAIC,OAAOC,SAAWC,MAAMC,QAAU,CAC9GC,MAAAA,EAAYpB,EAAUqB,aAAa,cACnCC,EAAatB,EAAUqB,aAAa,WACpCE,EAAavB,EAAUqB,aAAa,WAGtCD,GAAatB,GAEbc,EAASC,QAGTb,EAAUW,aAAa,WAAY,UAAWY,KAE9CvB,EAAUW,aAAa,aAAcb,KAIrCE,EAAUW,aAAa,WAAY,UAAWW,KAE9CtB,EAAUW,aAAa,aAAc1B,GACrC2B,EAASY,OAAS,EAElBZ,EAASa,YAMzBC,OAAQ,SAASC,GAGA,KAAKrC,KACP,KAAKgB,IAEpBO,MAAO,aAGPY,KAAM,aAING,OAAQ,WACEtC,MAAAA,EAAO,KAAKA,KACZgB,EAAK,KAAKA,GAGZhB,EAAKuC,OACLvB,EAAGwB,oBAAoBxC,EAAKuC,MAAO,KAAKE","file":"video-control.ecaf451e.js","sourceRoot":"../src","sourcesContent":["/* global AFRAME, ARENA */\n\n/**\n * Adds a video to an entity and controls its playback.\n *\n */\nAFRAME.registerComponent('video-control', {\n    // e.g. <a-entity video-control=\"videoName: superVideo\" ...>\n\n    schema: {\n        videoPath: {\n            type: 'string',\n            default: '',\n        },\n    },\n    multiple: true,\n\n    init: function() {\n        const data = this.data;\n        const theID = data.video_object;\n        const videoPath = data.video_path;\n        const anyoneClicks = data.anyone_clicks;\n        const videoLoop = data.video_loop;\n        let frameSrc = 'images/conix-face.white.jpg'; // default\n        if (data.frame_object) {\n            frameSrc = data.frame_object;\n        }\n\n        const thePlayer = document.getElementById(theID);\n        const theAssets = $('a-assets');\n        const whoVideo = document.getElementById(videoPath);\n\n        this.videoNum = this.el.id;\n        const videoId = this.videoNum + '_videoId';\n        ;\n        theAssets.append(\n            `<video id='${videoId}' src='${videoPath}' autoplay loop='${videoLoop}'/>`,\n            // `<a-entity id='${videoId}' src='${videoPath}' muted='true' loop='false'/>`\n        );\n\n        const frameId = this.videoNum + '_frameId';\n        ;\n        theAssets.append(\n            `<image id='${frameId}' src='${frameSrc}'/>`,\n        );\n\n        thePlayer.setAttribute('material', 'src', `#${frameId}`);\n\n        // save the video or frozen frame URL as 'frameSrc'\n        thePlayer.setAttribute('arenaVideo', frameSrc);\n        thePlayer.setAttribute('videoId', videoId);\n        thePlayer.setAttribute('frameId', frameId);\n\n        const thevideo = document.getElementById(videoId);\n        thevideo.pause(); // start the video as paused initially or else audio will play when video is not shown!\n\n        this.el.addEventListener('mousedown', function(evt) {\n            if (evt.detail.clicker == ARENA.camName || anyoneClicks && evt.detail.clicker && (evt.detail.clicker != ARENA.camName)) {\n                const theSource = thePlayer.getAttribute('arenaVideo');\n                const theVideoId = thePlayer.getAttribute('videoId');\n                const theFrameId = thePlayer.getAttribute('frameId');\n                // console.log(theSource)\n\n                if (theSource != frameSrc) {\n                    // FRAME\n                    thevideo.pause(); // pause the html video elem ==> pause aframe video elem\n\n                    // thePlayer.setAttribute('material', 'src', `#${frameId}`);\n                    thePlayer.setAttribute('material', 'src', `#${theFrameId}`);\n\n                    thePlayer.setAttribute('arenaVideo', frameSrc);\n                } else {\n                    // VIDEO\n                    // thePlayer.setAttribute('material', 'src', `#${videoId}`);\n                    thePlayer.setAttribute('material', 'src', `#${theVideoId}`);\n\n                    thePlayer.setAttribute('arenaVideo', videoPath);\n                    thevideo.volume = 1; // default is 1; this just demonstrates how to change\n\n                    thevideo.play(); // play the html video elem ==> play aframe video elem\n                }\n            }\n        });\n    },\n\n    update: function(oldData) {\n        // this in fact only gets called when the component that it is - gets updated\n        // unlike the update method in Unity that gets called every frame\n        const data = this.data; // Component property values.\n        const el = this.el; // Reference to the component's entity.\n    },\n    pause: function() {\n        // this.removeEventListeners()\n    },\n    play: function() {\n        // this.addEventListeners()\n    },\n    // handle component removal (why can't it just go away?)\n    remove: function() {\n        const data = this.data;\n        const el = this.el;\n\n        // remove event listener\n        if (data.event) {\n            el.removeEventListener(data.event, this.eventHandlerFn);\n        }\n    },\n});\n"]}