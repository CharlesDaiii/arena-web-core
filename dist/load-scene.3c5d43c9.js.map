{"version":3,"sources":["components/load-scene.js"],"names":["AFRAME","registerComponent","schema","on","default","url","position","type","x","y","z","rotation","w","multiple","init","update","oldData","data","el","addEventListener","evt","detail","console","log","loaded","ARENA","unloadArena","loadArena","pause","play","remove","event","removeEventListener","eventHandlerFn"],"mappings":";AAMAA,OAAOC,kBAAkB,aAAc,CAEnCC,OAAQ,CACJC,GAAI,CACAC,QAAS,IAEbC,IAAK,CACDD,QAAS,IAEbE,SAAU,CACNC,KAAM,OACNH,QAAS,CACLI,EAAG,EACHC,EAAG,EACHC,EAAG,IAGXC,SAAU,CACNJ,KAAM,OACNH,QAAS,CACLI,EAAG,EACHC,EAAG,EACHC,EAAG,EACHE,EAAG,KAKfC,UAAU,EAEVC,KAAM,aAINC,OAAQ,SAASC,GAGPC,MAAAA,EAAO,KAAKA,KACZC,EAAK,KAAKA,GAEZD,EAAKd,GACLe,EAAGC,iBAAiBF,EAAKd,GAAI,SAASiB,GAC9B,aAAcA,EAAIC,SAIlBC,QAAQC,IAAI,kBAAoBN,EAAKZ,KAChC,KAAKmB,QAINC,MAAMC,YAAYT,EAAKZ,KAClBmB,KAAAA,QAAS,IAJdC,MAAME,UAAUV,EAAKZ,IAAKY,EAAKX,SAAUW,EAAKN,UACzCa,KAAAA,QAAS,MAS1BF,QAAQC,IAAIN,IAIpBW,MAAO,aAGPC,KAAM,aAINC,OAAQ,WACEb,MAAAA,EAAO,KAAKA,KACZC,EAAK,KAAKA,GAGZD,EAAKc,OACLb,EAAGc,oBAAoBf,EAAKc,MAAO,KAAKE","file":"load-scene.3c5d43c9.js","sourceRoot":"../src","sourcesContent":["/* global AFRAME, ARENA */\n\n/**\n * Load scene from persistence.\n *\n */\nAFRAME.registerComponent('load-scene', {\n    // load scene from persistence db\n    schema: {\n        on: {\n            default: '',\n        }, // event to listen 'on'\n        url: {\n            default: '',\n        }, // http:// style url\n        position: {\n            type: 'vec3',\n            default: {\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        },\n        rotation: {\n            type: 'vec4',\n            default: {\n                x: 0,\n                y: 0,\n                z: 0,\n                w: 1,\n            },\n        },\n    },\n\n    multiple: true,\n\n    init: function() {\n        const self = this;\n    },\n\n    update: function(oldData) {\n        // this in fact only gets called when the component that it is - gets updated\n        // unlike the update method in Unity that gets called every frame\n        const data = this.data; // Component property values.\n        const el = this.el; // Reference to the component's entity.\n\n        if (data.on) { // we have an event?\n            el.addEventListener(data.on, function(evt) {\n                if ('cursorEl' in evt.detail) {\n                    // internal click event, our scene only\n                } else {\n                    // MQTT click event that everyone gets\n                    console.log('load-scene url=' + data.url);\n                    if (!this.loaded) {\n                        ARENA.loadArena(data.url, data.position, data.rotation);\n                        this.loaded = true;\n                    } else {\n                        ARENA.unloadArena(data.url);\n                        this.loaded = false;\n                    }\n                }\n            });\n        } else {\n            // `event` not specified, just log the message.\n            console.log(data);\n        }\n    },\n\n    pause: function() {\n        // this.removeEventListeners()\n    },\n    play: function() {\n        // this.addEventListeners()\n    },\n    // handle component removal (why can't it just go away?)\n    remove: function() {\n        const data = this.data;\n        const el = this.el;\n\n        // remove event listener\n        if (data.event) {\n            el.removeEventListener(data.event, this.eventHandlerFn);\n        }\n    },\n});\n"]}