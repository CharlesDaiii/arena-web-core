{"version":3,"sources":["components/arena-camera.js"],"names":["AFRAME","registerComponent","schema","enabled","type","default","displayName","color","Math","floor","random","toString","rotation","THREE","Quaternion","position","Vector3","vioRotation","vioPosition","init","vioMatrix","Matrix4","camParent","cam","cpi","lastPose","heartBeatCounter","tick","utils","throttleTick","ARENA","updateMillis","publishPose","data","msg","object_id","camName","action","object_type","x","parseFloat","toFixed","y","z","_x","_y","_z","w","_w","JitsiAPI","jitsiId","getJitsiId","hasAudio","hasVideo","FaceTracker","hasAvatar","running","publish","outputTopic","publishVio","fixedCamera","vioTopic","publishHeadText","scenenameParam","update","oldData","t","dt","el","setFromRotationMatrix","object3D","matrixWorld","setFromMatrixPosition","parent","getInverse","multiply","copy","rotationCoords","newPose","rotToText","coordsToText"],"mappings":"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","file":"arena-camera.22e79fbf.js","sourceRoot":"../src","sourcesContent":["/* global AFRAME, ARENA */\n\n/**\n * Tracking camera movement in real time. Emits camera pose change and vio change events.\n *\n */\nAFRAME.registerComponent('arena-camera', {\n    schema: {\n        enabled: {type: 'boolean', default: false},\n        displayName: {type: 'string', default: 'No Name'},\n        color: {type: 'string', default: '#' + Math.floor(Math.random() * 16777215).toString(16)},\n        rotation: {type: 'vec4', default: new THREE.Quaternion()},\n        position: {type: 'vec3', default: new THREE.Vector3()},\n        vioRotation: {type: 'vec4', default: new THREE.Quaternion()},\n        vioPosition: {type: 'vec3', default: new THREE.Vector3()},\n    },\n\n    init: function() {\n        this.vioMatrix = new THREE.Matrix4();\n        this.camParent = new THREE.Matrix4();\n        this.cam = new THREE.Matrix4();\n        this.cpi = new THREE.Matrix4();\n\n        this.lastPose = '';\n\n        this.heartBeatCounter = 0;\n        this.tick = AFRAME.utils.throttleTick(this.tick, ARENA.updateMillis, this);\n    },\n\n    publishPose() {\n        const data = this.data;\n        if (!data.enabled) return;\n\n        const msg = {\n            object_id: ARENA.camName,\n            displayName: data.displayName,\n            action: 'create',\n            type: 'object',\n            data: {\n                object_type: 'camera',\n                position: {\n                    x: parseFloat(data.position.x.toFixed(3)),\n                    y: parseFloat(data.position.y.toFixed(3)),\n                    z: parseFloat(data.position.z.toFixed(3)),\n                },\n                rotation: {\n                    x: parseFloat(data.rotation._x.toFixed(3)),\n                    y: parseFloat(data.rotation._y.toFixed(3)),\n                    z: parseFloat(data.rotation._z.toFixed(3)),\n                    w: parseFloat(data.rotation._w.toFixed(3)),\n                },\n                color: data.color,\n            },\n        };\n\n        if (ARENA.JitsiAPI) {\n            msg.jitsiId = ARENA.JitsiAPI.getJitsiId();\n            msg.hasAudio = ARENA.JitsiAPI.hasAudio();\n            msg.hasVideo = ARENA.JitsiAPI.hasVideo();\n        }\n\n        if (ARENA.FaceTracker) {\n            msg.hasAvatar = ARENA.FaceTracker.running();\n        }\n\n        publish(ARENA.outputTopic + ARENA.camName, msg); // extra timestamp info at end for debugging\n    },\n\n    publishVio() {\n        const data = this.data;\n        if (!data.enabled) return;\n\n        if (ARENA.fixedCamera !== '') {\n            const msg = {\n                object_id: ARENA.camName,\n                action: 'create',\n                type: 'object',\n                data: {\n                    object_type: 'camera',\n                    position: {\n                        x: parseFloat(data.vioPosition.x.toFixed(3)),\n                        y: parseFloat(data.vioPosition.y.toFixed(3)),\n                        z: parseFloat(data.vioPosition.z.toFixed(3)),\n                    },\n                    rotation: {\n                        x: parseFloat(data.vioRotation._x.toFixed(3)),\n                        y: parseFloat(data.vioRotation._y.toFixed(3)),\n                        z: parseFloat(data.vioRotation._z.toFixed(3)),\n                        w: parseFloat(data.vioRotation._w.toFixed(3)),\n                    },\n                    color: data.color,\n                },\n            };\n            publish(ARENA.vioTopic + ARENA.camName, msg); // extra timestamp info at end for debugging\n        }\n    },\n\n    publishHeadText() {\n        const data = this.data;\n\n        publish(ARENA.outputTopic + ARENA.scenenameParam + '/head-text_' + ARENA.camName, {\n            'object_id': ARENA.camName,\n            'action': 'create',\n            'type': 'object',\n            'displayName': data.displayName,\n            'data': {'object_type': 'headtext'},\n        });\n    },\n\n    update(oldData) {\n        const data = this.data;\n\n        if (data.displayName !== oldData.displayName) {\n            this.publishHeadText();\n        }\n    },\n\n    tick: (function(t, dt) {\n        const data = this.data;\n        const el = this.el;\n\n        this.heartBeatCounter++;\n\n        data.rotation.setFromRotationMatrix(el.object3D.matrixWorld);\n        data.position.setFromMatrixPosition(el.object3D.matrixWorld);\n\n        this.camParent = el.object3D.parent.matrixWorld;\n        this.cam = el.object3D.matrixWorld;\n\n        this.cpi.getInverse(this.camParent);\n        this.cpi.multiply(this.cam);\n\n        this.vioMatrix.copy(this.cpi);\n        data.vioRotation.setFromRotationMatrix(this.cpi);\n        data.vioPosition.setFromMatrixPosition(this.cpi);\n\n        const rotationCoords = rotToText(data.rotation);\n        const positionCoords = coordsToText(data.position);\n        const newPose = rotationCoords + ' ' + positionCoords;\n\n        // update position every 1 sec\n        if (this.lastPose !== newPose || this.heartBeatCounter % (1000 / ARENA.updateMillis) == 0) {\n            this.publishPose();\n            this.publishVio();\n            this.lastPose = newPose;\n        }\n    }),\n});\n"]}