{"version":3,"sources":["components/press-and-move.js"],"names":["AFRAME","registerComponent","schema","speed","type","default","init","timer","drag","longTouch","tick","utils","throttleTick","ARENA","updateMillis","self","window","addEventListener","evt","preventDefault","setTimeout","clearTimeout","t","dt","eulerRot","sceneObjects","myCamera","getAttribute","dx","data","Math","cos","y","PI","dy","sin","dz","x","newPosition","z","flying","setAttribute"],"mappings":";AAMAA,OAAOC,kBAAkB,iBAAkB,CACvCC,OAAQ,CACJC,MAAO,CAACC,KAAM,SAAUC,QAAS,IAErCC,KAAM,WACGC,KAAAA,MAAQ,KACRC,KAAAA,MAAO,EACPC,KAAAA,WAAY,EAEZC,KAAAA,KAAOV,OAAOW,MAAMC,aAAa,KAAKF,KAAMG,MAAMC,aAAc,MAE/DC,MAAAA,EAAO,KACbC,OAAOC,iBAAiB,aAAc,SAASC,GAC3CA,EAAIC,iBACCJ,EAAKR,QACNQ,EAAKR,MAAQS,OAAOI,WAAW,KAC3BL,EAAKN,WAAY,GAClB,QAGXO,OAAOC,iBAAiB,WAAY,SAASC,GACrCH,EAAKR,QACLc,aAAaN,EAAKR,OAClBQ,EAAKR,MAAQ,MAEjBQ,EAAKN,WAAY,EACjBM,EAAKP,MAAO,IAEhBQ,OAAOC,iBAAiB,YAAa,SAASC,OAIlDR,KAAO,SAASY,EAAGC,GACX,GAAA,KAAKd,YACAF,KAAAA,MAAQ,MACR,KAAKC,MAAM,CACNgB,MAAAA,EAAWX,MAAMY,aAAaC,SAASC,aAAa,YACpDC,EAAK,KAAKC,KAAK1B,OAASoB,EAAK,KAAQO,KAAKC,IAAIP,EAASQ,EAAIF,KAAKG,GAAK,KACrEC,EAAK,KAAKL,KAAK1B,OAASoB,EAAK,KAAQO,KAAKK,IAAIX,EAASQ,EAAIF,KAAKG,GAAK,KACrEG,EAAK,KAAKP,KAAK1B,OAASoB,EAAK,KAAQO,KAAKK,IAAIX,EAASa,EAAIP,KAAKG,GAAK,KACrEK,EAAczB,MAAMY,aAAaC,SAASC,aAAa,YAC7DW,EAAYD,GAAKH,EACjBI,EAAYC,GAAKX,EACjBU,EAAYN,GAAKnB,MAAM2B,OAASJ,EAAK,EACrCvB,MAAMY,aAAaC,SAASe,aAAa,WAAYH","file":"press-and-move.0a6fb412.js","sourceRoot":"../src","sourcesContent":["/* global AFRAME, ARENA */\n\n/**\n * Support user camera movement with the mouse.\n *\n */\nAFRAME.registerComponent('press-and-move', {\n    schema: {\n        speed: {type: 'number', default: 5.0},\n    },\n    init: function() {\n        this.timer = null;\n        this.drag = false;\n        this.longTouch = false;\n\n        this.tick = AFRAME.utils.throttleTick(this.tick, ARENA.updateMillis, this);\n\n        const self = this;\n        window.addEventListener('touchstart', function(evt) {\n            evt.preventDefault();\n            if (!self.timer) {\n                self.timer = window.setTimeout(() => {\n                    self.longTouch = true;\n                }, 750); // press for 750ms counts as long press\n            }\n        });\n        window.addEventListener('touchend', function(evt) {\n            if (self.timer) {\n                clearTimeout(self.timer);\n                self.timer = null;\n            }\n            self.longTouch = false;\n            self.drag = false;\n        });\n        window.addEventListener('touchmove', function(evt) {\n            // self.drag = true; // might be better without drag detection\n        });\n    },\n    tick: (function(t, dt) {\n        if (this.longTouch) {\n            this.timer = null;\n            if (!this.drag) {\n                const eulerRot = ARENA.sceneObjects.myCamera.getAttribute('rotation');\n                const dx = this.data.speed * (dt / 1000) * Math.cos(eulerRot.y * Math.PI / 180);\n                const dy = this.data.speed * (dt / 1000) * Math.sin(eulerRot.y * Math.PI / 180);\n                const dz = this.data.speed * (dt / 1000) * Math.sin(eulerRot.x * Math.PI / 180);\n                const newPosition = ARENA.sceneObjects.myCamera.getAttribute('position');\n                newPosition.x -= dy; // subtract b/c negative is forward\n                newPosition.z -= dx;\n                newPosition.y += ARENA.flying ? dz : 0;\n                ARENA.sceneObjects.myCamera.setAttribute('position', newPosition);\n            }\n        }\n    }),\n});\n\n"]}