{"version":3,"sources":["components/impulse.js"],"names":["AFRAME","registerComponent","schema","on","default","force","type","x","y","z","position","multiple","init","update","oldData","data","el","addEventListener","args","detail","clicker","body","THREE","Vector3","pos","applyImpulse","console","log","remove","event","removeEventListener","eventHandlerFn"],"mappings":";AAQAA,OAAOC,kBAAkB,UAAW,CAChCC,OAAQ,CACJC,GAAI,CACAC,QAAS,IAEbC,MAAO,CACHC,KAAM,OACNF,QAAS,CACLG,EAAG,EACHC,EAAG,EACHC,EAAG,IAGXC,SAAU,CACNJ,KAAM,OACNF,QAAS,CACLG,EAAG,EACHC,EAAG,EACHC,EAAG,KAKfE,UAAU,EAEVC,KAAM,aAINC,OAAQ,SAASC,GACPC,MAAAA,EAAO,KAAKA,KACZC,EAAK,KAAKA,GAEZD,EAAKZ,GACLa,EAAGC,iBAAiBF,EAAKZ,GAAI,SAASe,GAC9BA,GAAAA,EAAKC,OAAOC,SACRJ,EAAGK,KAAM,CAEHhB,MAAAA,EAAQ,IAAIiB,MAAMC,QAAQR,EAAKV,MAAME,EAAGQ,EAAKV,MAAMG,EAAGO,EAAKV,MAAMI,GACjEe,EAAM,IAAIF,MAAMC,QAAQR,EAAKL,SAASH,EAAGQ,EAAKL,SAASF,EAAGO,EAAKL,SAASD,GAC9EO,EAAGK,KAAKI,aAAapB,EAAOmB,MAMxCE,QAAQC,IAAIZ,IAIpBa,OAAQ,WACEb,MAAAA,EAAO,KAAKA,KACZC,EAAK,KAAKA,GAGZD,EAAKc,OACLb,EAAGc,oBAAoBf,EAAKc,MAAO,KAAKE","file":"impulse.ae5b67ee.js","sourceRoot":"../src","sourcesContent":["/* global AFRAME */\n\n/**\n * One physics feature is applying an impulse to an object to set it in motion.\n * This happens in conjunction with an event.\n * Works along physics system (aframe-physics-system).\n *\n */\nAFRAME.registerComponent('impulse', {\n    schema: {\n        on: {\n            default: '',\n        }, // event to listen 'on'\n        force: {\n            type: 'vec3',\n            default: {\n                x: 1,\n                y: 1,\n                z: 1,\n            },\n        },\n        position: {\n            type: 'vec3',\n            default: {\n                x: 1,\n                y: 1,\n                z: 1,\n            },\n        },\n    },\n\n    multiple: true,\n\n    init: function() {\n        const self = this;\n    },\n\n    update: function(oldData) {\n        const data = this.data; // Component property values.\n        const el = this.el; // Reference to the component's entity.\n\n        if (data.on) { // we have an event?\n            el.addEventListener(data.on, function(args) {\n                if (args.detail.clicker) { // our synthetic event from MQTT\n                    if (el.body) { // has physics = dynamic-body Component\n                        // e.g. <a-entity impulse=\"on: mouseup; force: 1 50 1; position: 1 1 1\" ...>\n                        const force = new THREE.Vector3(data.force.x, data.force.y, data.force.z);\n                        const pos = new THREE.Vector3(data.position.x, data.position.y, data.position.z);\n                        el.body.applyImpulse(force, pos);\n                    }\n                }\n            });\n        } else {\n            // `event` not specified, just log the message.\n            console.log(data);\n        }\n    },\n    // handle component removal \n    remove: function() {\n        const data = this.data;\n        const el = this.el;\n\n        // remove event listener\n        if (data.event) {\n            el.removeEventListener(data.event, this.eventHandlerFn);\n        }\n    },\n});\n"]}